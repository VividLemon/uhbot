{
	"pong": "Pong",
	"error": "Error",
	"totalIs": "The total is {{value}}",
	"canGetToSkill": "You can get to skill level",
	"startingAtLevel": "Starting at level",
	"with": "With",
	"hop": {
		"one": "hop",
		"other": "hops"
	},
	"remaining": "remaining",
	"fromNotNegative": "From cannot be negative",
	"toNotValue": "To cannot be less than from value",
	"itTakes": "It takes",
	"toGetToLevel": "To get to level",
	"fromLevel": "From level",
	"rock": "Rock",
	"paper": "Paper",
	"scissors": "Scissors",
	"lizard": "Lizard",
	"cannotChallengeBots": "You cannot challenge bots",
	"cannotChallengeYourself": "You cannot challenge yourself",
	"challengeOutstanding": "An outstanding challenge already exists.\nFinish that one first!",
	"endGame": "End game",
	"challengedBy": "you have been challenged by",
	"toADuel": "to a duel",
	"expiresAt": "Expires at",
	"endedByDefault": "Game ended by default. User not available",
	"notMeantForPlayer": "This isn't meant for you!",
	"gameEndedBy": "Game ended by {{user}}",
	"timeExpired": "Time has expired! Create a new one to try again",
	"successfullyUpdated": "Successfully updated",
	"challengerWon": "The challenger won the game, {{reason}}",
	"victimWon": "The victim won the game, {{reason}}",
	"draw": "The game is a draw, {{reason}}",
	"nobodyWonError": "Nobody won, error: Challenger played: {{chalPlay}}, Victim played {{victPlay}}",
	"duplicatePlay": "both players chose {{played}}",
	"hasPlayed": "has played",
	"rockPaper": "Paper Covers Rock",
	"rockScissors": "Rock Smashes Scissors",
	"rockLizard": "Rock Crushes Lizard",
	"rockSpock": "Spock vaporizes rock",
	"paperScissors": "Scissors Cuts Paper",
	"paperLizard": "Lizard Eats Paper",
	"paperSpock": "Paper Disproves Spock",
	"scissorsLizard": "Scissors Decapitates Lizard",
	"scissorsSpock": "Spock Smashes Scissors",
	"lizardSpock": "Lizard Poisons Spock",
	"sizeNegativeOrZero": "Size cannot be negative or zero",
	"skillNotNegative": "Skill cannot be negative",
	"valueNotEmpty": "Value cannot be empty",
	"valueYesNumbers": "Value contains no numbers",
	"valueOverMaxSafeArgs": "Value is over the maximum safe arguments limit. Why are you using so many arguments?!?!",
	"hopsNotNegative": "Hops cannot be negative or 0",
	"numberNegativeOrZero": "Number cannot be negative or zero",
	"rerollsLessThan": "Rerolls should be less than {{value}}",
	"rerollsNegativeOrZero": "Rerolls cannot be negative or zero",
	"noZeroDivide": "No values can be 0. Cannot divide by 0",
	"explodeNotZeroOrNegative": "Explode cannot be negative or zero",
	"explodeOverPercentile": "Explode cannot be greater than what's possible on a 100 sided die",
	"explodeOverValue": "Explode cannot be greater than the size of the die",
	"interalError": "There was an unexpected internal error.",
	"incorrectValuesModifiers": "Incorrect values in modifiers",
	"overMaxSafeArgs": "Value is over the maximum safe arguments limit. Why are you using this many arguments?",
	"notZeroWhenDividing": "Value cannot be 0 when dividing!",
	"unrecognizedType": "Unrecognized type of {{type}}",
	"localeNotStandard": "Locale is not standard length of 2 or 5",
	"errorWasLogged": "The error was logged",
	"unexpectedIssue": "Unexpected issue",
	"valueNotSetError": "Value not set. How did you get here?",
	"environmentNotSetError": "Environment not set. Server error",
	"simplified": "Simplified {value}",
	"rationalized": "Rationalized {value}",
	"value": "Value {value}",
	"derived": "Derived {value}"
}